// <auto-generated />
using System;
using JobPortal.Entities.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobPortal.Entities.Migrations
{
    [DbContext(typeof(JobDbContext))]
    [Migration("20240818191948_AddEducationAndCertification")]
    partial class AddEducationAndCertification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("JobSeekerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CertificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("JobSeekerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("Certifications", (string)null);
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CompanyProfiles", (string)null);
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Akademik"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AR-GE"
                        },
                        new
                        {
                            Id = 3,
                            Name = " Arşiv / Dokümantasyon"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bakım / Onarım"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bilgi İşlem"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Depo / Antrepo"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Eğitim"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Genel Başvuru"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Güvenlik"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Haberleşme"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Halkla İlişkiler"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Hizmet"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Hukuk"
                        },
                        new
                        {
                            Id = 14,
                            Name = "İdari İşler"
                        },
                        new
                        {
                            Id = 15,
                            Name = "İnsan Kaynakları"
                        },
                        new
                        {
                            Id = 16,
                            Name = "İş Geliştirme"
                        },
                        new
                        {
                            Id = 17,
                            Name = "İthalat / İhracat"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kalite"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Lojistik"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Mimarlık"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Muhasebe"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Mühendislik"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Müşteri Hizmetleri / Çağrı Merkezi"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Müşteri İlişkileri"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Mütercim Tercümanlık"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Nakliye"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Operasyon"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Organizasyon"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Pazar Araştırma"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Pazarlama"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Personel"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Planlama"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Reklam"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Sağlık"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Satınalma"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Satış"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Sekreterya"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Spor"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Tasarım / Grafik"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Taşıma"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Teknikerlik"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Teknisyenlik"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Turizm"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Ulaştırma"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Üretim / İmalat"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Yönetim"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Finans"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Teknik"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Denetim / Teftiş"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Yiyecek ve İçecek"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Kredi"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Sigorta"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Ruhsatlandırma"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Program"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Dış İlişkiler"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Tedarik Yönetimi"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Sistem"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Risk Yönetimi"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Analiz / Araştırma"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Bireysel Portföy Yönetimi"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Borsa"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Borsa Finans"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Dış Denetim"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Hazine ve Sabit Getirili Menkul Değerler"
                        },
                        new
                        {
                            Id = 66,
                            Name = "İç Denetim"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Kurumsal Finansman"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Uluslararası Sermaye Piyasası"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Varlık Yönetimi"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Yurtiçi Sermaye Piyasaları"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Gayrimenkul Değerleme"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Ön Büro"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Satış ve Pazarlama"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Bilgi Teknolojileri / IT"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Teknik Servis"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Pazarlama Teknolojileri"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Dijital Pazarlama"
                        },
                        new
                        {
                            Id = 78,
                            Name = "İş Sağlığı ve Güvenliği"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Parça"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Müşteri Hizmetleri"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Satış Geliştirme"
                        },
                        new
                        {
                            Id = 82,
                            Name = "E-Ticaret"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Yönetim, Risk ve Uyumluluk"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Laboratuvar"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Mali İşler"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Vize İşlemleri"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Diğer"
                        });
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GraduationDegree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<int>("JobSeekerId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId")
                        .IsUnique();

                    b.ToTable("Employers", (string)null);
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("SectorId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.JobSeeker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Resume")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Skills")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("JobSeekers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ali.veli@example.com",
                            FirstName = "Ali",
                            LastName = "Veli",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Sectors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bilişim"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Üretim / Endüstriyel Ürünler"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Elektrik & Elektronik"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Güvenlik"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Enerji"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Gıda"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kimya"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Maden ve Metal Sanayi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Mobilya & Aksesuar"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ev Eşyaları"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Orman Ürünleri"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ofis / Büro Malzemeleri"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Otomotiv"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Sağlık"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Tarım / Ziraat"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Taşımacılık"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Tekstil"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Telekomünikasyon"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Turizm"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Yapı"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Topluluklar"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Hizmet"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Danışmanlık"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Reklam ve Tanıtım"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Eğitim"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Finans - Ekonomi"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Ticaret"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Denizcilik"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Eğlence - Kültür - Sanat"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Basım - Yayın"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Medya"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Havacılık"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Hızlı Tüketim Malları"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Hayvancılık"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Sigortacılık"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Dayanıklı Tüketim Ürünleri"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Atık Yönetimi ve Geri Dönüşüm"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Arşiv Yönetimi ve Saklama"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Perakende"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Çevre"
                        },
                        new
                        {
                            Id = 41,
                            Name = "İletişim Danışmanlığı"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Kaynak ve Kesme Ekipmanları"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Gemi Yan Sanayi"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Bina ve Site Yönetimi"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Sondaj"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Bilgi Teknolojileri"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Dental"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Organizasyon"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Otoyol, Tünel ve Köprü İşletmeciliği"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Diğer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Application", b =>
                {
                    b.HasOne("JobPortal.Entities.Models.Concrete.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Entities.Models.Concrete.JobSeeker", "JobSeeker")
                        .WithMany("Applications")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Certification", b =>
                {
                    b.HasOne("JobPortal.Entities.Models.Concrete.JobSeeker", "JobSeeker")
                        .WithMany("Certifications")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Education", b =>
                {
                    b.HasOne("JobPortal.Entities.Models.Concrete.JobSeeker", "JobSeeker")
                        .WithMany("Educations")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Employer", b =>
                {
                    b.HasOne("JobPortal.Entities.Models.Concrete.CompanyProfile", "CompanyProfile")
                        .WithOne("Employer")
                        .HasForeignKey("JobPortal.Entities.Models.Concrete.Employer", "CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CompanyProfile");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Job", b =>
                {
                    b.HasOne("JobPortal.Entities.Models.Concrete.Department", "Department")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Entities.Models.Concrete.Employer", "Employer")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Entities.Models.Concrete.Sector", "Sector")
                        .WithMany("Jobs")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employer");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.CompanyProfile", b =>
                {
                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Department", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Employer", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Job", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.JobSeeker", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Certifications");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("JobPortal.Entities.Models.Concrete.Sector", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
